{"version":3,"sources":["helpers/api.ts","components/PostsList/PostList.tsx","components/PostSearch/PostSearch.tsx","App.tsx","index.tsx"],"names":["getData","url","fetch","then","response","json","PostsList","posts","map","post","key","id","className","author","name","email","title","body","comments","comment","PostSearch","handleSearchInput","type","aria-label","aria-describedby","onChange","App","useState","setPosts","isLoaded","setIsLoaded","isLoading","setIsLoading","postSearch","setPostSearch","loadPosts","a","Promise","all","usersFromServer","commentsFromServer","postsFromServer","preparedPosts","find","user","userId","filter","postId","filtredPosts","query","pattern","toLocaleLowerCase","toLowerCase","includes","getFiltredPosts","event","value","currentTarget","disabled","onClick","ReactDOM","render","document","getElementById"],"mappings":"sPAEMA,G,MAAU,SAAIC,GAAJ,OACdC,MAHmB,wCAGED,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCGzCC,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OACE,4BACGA,EAAMC,KAAI,SAAAC,GAAI,iBACb,wBAAIC,IAAKD,EAAKE,GAAIC,UAAU,sBAC1B,6BACE,+CAEGH,EAAKI,cAFR,aAEG,EAAaC,MAEhB,oCAEE,sCAAKL,EAAKI,cAAV,aAAK,EAAaE,SAGtB,6BACE,4BAAKN,EAAKO,OACV,2BAAIP,EAAKQ,OAEX,yBAAKL,UAAU,sBACb,0CADF,UAEGH,EAAKS,gBAFR,aAEG,EAAeV,KAAI,SAAAW,GAAO,OACzB,yBAAKT,IAAKS,EAAQR,IAChB,0CAEGQ,QAFH,IAEGA,OAFH,EAEGA,EAASL,MAEZ,2CAEGK,QAFH,IAEGA,OAFH,EAEGA,EAASJ,OAEZ,kCAAII,QAAJ,IAAIA,OAAJ,EAAIA,EAASF,MACb,wCChCHG,EAA8B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAC5C,OACE,yBAAKT,UAAU,mCACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBD,GAAG,wBAAtC,WAEF,2BACEW,KAAK,OACLV,UAAU,eACVW,aAAW,uBACXC,mBAAiB,uBACjBC,SAAUJ,MCyDHK,EA3DH,WAAO,IAAD,EACUC,mBAAiB,IAD3B,mBACTpB,EADS,KACFqB,EADE,OAEgBD,oBAAkB,GAFlC,mBAETE,EAFS,KAECC,EAFD,OAGkBH,oBAAkB,GAHpC,mBAGTI,EAHS,KAGEC,EAHF,OAIoBL,mBAAiB,IAJrC,mBAITM,EAJS,KAIGC,EAJH,KAMVC,EAAS,uCAAG,sCAAAC,EAAA,6DAChBJ,GAAa,GADG,SAGqDK,QAAQC,IAC3E,CHlBwBtC,EAAc,SACXA,EAAiB,YAFpBA,EAAc,WGexB,mCAGTuC,EAHS,KAGQC,EAHR,KAG4BC,EAH5B,KAOVC,EAAgBD,EAAgBjC,KAAI,SAAAC,GAAI,kCACzCA,GADyC,IAE5CI,OAAQ0B,EAAgBI,MAAK,SAAAC,GAAI,OAAIA,EAAKjC,KAAOF,EAAKoC,UACtD3B,SAAUsB,EAAmBM,QAAO,SAAA3B,GAAO,OAAIA,EAAQ4B,SAAWtC,EAAKE,WAGzEiB,EAASc,GACTV,GAAa,GACbF,GAAY,GAfI,4CAAH,qDAwBTkB,EAtCgB,SAACzC,EAAe0C,GACtC,IAAMC,EAAUD,EAAME,oBAEtB,OAAO5C,EAAMuC,QAAO,SAAArC,GAAI,OAAKA,EAAKO,MAAQP,EAAKQ,MAC5CmC,cACAC,SAASH,MAiCSI,CAAgB/C,EAAO0B,GAE5C,OACE,yBAAKrB,UAAU,aACZiB,EAEG,oCACE,kBAAC,EAAD,CACER,kBAdc,SAACkC,GAA8C,IAC/DC,EAAUD,EAAME,cAAhBD,MAERtB,EAAcsB,MAaN,kBAAC,EAAD,CACEjD,MAAOyC,KAKX,4BACEpC,UAAU,4BACVU,KAAK,SACLoC,SAAU3B,EACV4B,QAASxB,GAERJ,EAAY,aAAe,UC9DxC6B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.6d96bab4.chunk.js","sourcesContent":["const URL_TEMPLATE = 'https://jsonplaceholder.typicode.com/';\n\nconst getData = <T>(url: string): Promise<T[]> => (\n  fetch(URL_TEMPLATE + url).then(response => response.json())\n);\n\nexport const getPosts = () => getData<Post>('posts');\nexport const getUsers = () => getData<User>('users');\nexport const getComments = () => getData<Comment>('comments');\n","import React from 'react';\n\ntype Props = {\n  posts: Post[];\n};\n\nexport const PostsList: React.FC<Props> = ({ posts }) => {\n  return (\n    <ul>\n      {posts.map(post => (\n        <li key={post.id} className=\"bg-dark text-light\">\n          <div>\n            <p>\n              Author:\n              {post.author?.name}\n            </p>\n            <p>\n              Email:\n              <em>{post.author?.email}</em>\n            </p>\n          </div>\n          <div>\n            <h4>{post.title}</h4>\n            <p>{post.body}</p>\n          </div>\n          <div className=\"bg-light text-dark\">\n            <h3>Comments: </h3>\n            {post.comments?.map(comment => (\n              <div key={comment.id}>\n                <p>\n                  User:\n                  {comment?.name}\n                </p>\n                <p>\n                  Email:\n                  {comment?.email}\n                </p>\n                <p>{comment?.body}</p>\n                <hr />\n              </div>\n            ))}\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  handleSearchInput: (event: React.FormEvent<HTMLInputElement>) => void;\n};\n\nexport const PostSearch: React.FC<Props> = ({ handleSearchInput }) => {\n  return (\n    <div className=\"input-group input-group-sm mb-3\">\n      <div className=\"input-group-prepend\">\n        <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">Search</span>\n      </div>\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        aria-label=\"Sizing example input\"\n        aria-describedby=\"inputGroup-sizing-sm\"\n        onChange={handleSearchInput}\n      />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getUsers, getPosts, getComments } from './helpers/api';\nimport { PostsList } from './components/PostsList/PostList';\nimport { PostSearch } from './components/PostSearch/PostSearch';\n\n\nconst getFiltredPosts = (posts: Post[], query: string) => {\n  const pattern = query.toLocaleLowerCase();\n\n  return posts.filter(post => (post.title + post.body)\n    .toLowerCase()\n    .includes(pattern));\n};\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [postSearch, setPostSearch] = useState<string>('');\n\n  const loadPosts = async () => {\n    setIsLoading(true);\n\n    const [usersFromServer, commentsFromServer, postsFromServer] = await Promise.all(\n      [getUsers(), getComments(), getPosts()],\n    );\n\n    const preparedPosts = postsFromServer.map(post => ({\n      ...post,\n      author: usersFromServer.find(user => user.id === post.userId),\n      comments: commentsFromServer.filter(comment => comment.postId === post.id),\n    }));\n\n    setPosts(preparedPosts);\n    setIsLoading(false);\n    setIsLoaded(true);\n  };\n\n  const handleSearchInput = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n\n    setPostSearch(value);\n  };\n\n  const filtredPosts = getFiltredPosts(posts, postSearch);\n\n  return (\n    <div className=\"container\">\n      {isLoaded\n        ? (\n          <>\n            <PostSearch\n              handleSearchInput={handleSearchInput}\n            />\n            <PostsList\n              posts={filtredPosts}\n            />\n          </>\n        )\n        : (\n          <button\n            className=\"btn btn-primary btn-block\"\n            type=\"button\"\n            disabled={isLoading}\n            onClick={loadPosts}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}